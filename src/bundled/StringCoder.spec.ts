import { expect } from 'chai'
import { StringStrainer, StringDecoder, StringEncoder, StringCoder } from './StringCoder'

describe('StringCoder', () => {
  it('can be initialized', () => {
    StringStrainer()
    StringDecoder()
    StringEncoder()
    StringCoder()
  })
  it('casts to decode type', () => {
    expect(StringCoder().asDecodeType('')).to.eq('')
    expect(StringCoder().asDecodeType('test')).to.eq('test')
    expect(StringCoder().asDecodeType(42 as any)).to.eq('42')
    expect(() => StringCoder().asDecodeType(undefined as any)).to.throw('Could not convert')
    expect(() => StringCoder().asDecodeType(null as any)).to.throw('Could not convert')
    expect(() => StringCoder().asDecodeType(true as any)).to.throw('Could not convert')
    expect(() => StringCoder().asDecodeType([] as any)).to.throw('Could not convert')
    expect(() => StringCoder().asDecodeType({} as any)).to.throw('Could not convert')
  })
  it('casts to encode type', () => {
    expect(StringCoder().asEncodeType('')).to.eq('')
    expect(StringCoder().asEncodeType('test')).to.eq('test')
    expect(StringCoder().asEncodeType(42 as any)).to.eq('42')
    expect(() => StringCoder().asEncodeType(undefined as any)).to.throw('Could not convert')
    expect(() => StringCoder().asEncodeType(null as any)).to.throw('Could not convert')
    expect(() => StringCoder().asEncodeType(true as any)).to.throw('Could not convert')
    expect(() => StringCoder().asEncodeType([] as any)).to.throw('Could not convert')
    expect(() => StringCoder().asEncodeType({} as any)).to.throw('Could not convert')
  })
  it('decodes type', () => {
    expect(StringCoder().decode('')).to.eq('')
    expect(StringCoder().decode('test')).to.eq('test')
    expect(StringCoder().decode(42 as any)).to.eq('42')
    expect(() => StringCoder().decode(undefined as any)).to.throw('Could not convert')
    expect(() => StringCoder().decode(null as any)).to.throw('Could not convert')
    expect(() => StringCoder().decode(true as any)).to.throw('Could not convert')
    expect(() => StringCoder().decode([] as any)).to.throw('Could not convert')
    expect(() => StringCoder().decode({} as any)).to.throw('Could not convert')
  })
  it('encodes type', () => {
    expect(StringCoder().encode('')).to.eq('')
    expect(StringCoder().encode('test')).to.eq('test')
    expect(StringCoder().encode(42 as any)).to.eq('42')
    expect(() => StringCoder().encode(undefined as any)).to.throw('Could not convert')
    expect(() => StringCoder().encode(null as any)).to.throw('Could not convert')
    expect(() => StringCoder().encode(true as any)).to.throw('Could not convert')
    expect(() => StringCoder().encode([] as any)).to.throw('Could not convert')
    expect(() => StringCoder().encode({} as any)).to.throw('Could not convert')
  })
})
