import { expect } from 'chai'
import { BooleanStrainer, BooleanDecoder, BooleanEncoder, BooleanCoder } from './BooleanCoder'

describe('BooleanCoder', () => {
  it('can be initialized', () => {
    BooleanStrainer()
    BooleanDecoder()
    BooleanEncoder()
    BooleanCoder()
  })
  it('casts to decode type', () => {
    expect(BooleanCoder().asDecodeType(true)).to.eq(true)
    expect(BooleanCoder().asDecodeType(1 as any)).to.eq(true)
    expect(BooleanCoder().asDecodeType(false)).to.eq(false)
    expect(BooleanCoder().asDecodeType(0 as any)).to.eq(false)
    expect(() => BooleanCoder().asDecodeType(undefined as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asDecodeType(null as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asDecodeType('' as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asDecodeType(42 as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asDecodeType([] as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asDecodeType({} as any)).to.throw('Could not convert')
  })
  it('casts to encode type', () => {
    expect(BooleanCoder().asEncodeType(true)).to.eq(true)
    expect(BooleanCoder().asEncodeType(1 as any)).to.eq(true)
    expect(BooleanCoder().asEncodeType(false)).to.eq(false)
    expect(BooleanCoder().asEncodeType(0 as any)).to.eq(false)
    expect(() => BooleanCoder().asEncodeType(undefined as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asEncodeType(null as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asEncodeType('' as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asEncodeType(42 as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asEncodeType([] as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().asEncodeType({} as any)).to.throw('Could not convert')
  })
  it('decodes type', () => {
    expect(BooleanCoder().decode(true)).to.eq(true)
    expect(BooleanCoder().decode(1 as any)).to.eq(true)
    expect(BooleanCoder().decode(false)).to.eq(false)
    expect(BooleanCoder().decode(0 as any)).to.eq(false)
    expect(() => BooleanCoder().decode(undefined as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().decode(null as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().decode('' as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().decode(42 as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().decode([] as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().decode({} as any)).to.throw('Could not convert')
  })
  it('encodes type', () => {
    expect(BooleanCoder().encode(true)).to.eq(true)
    expect(BooleanCoder().encode(1 as any)).to.eq(true)
    expect(BooleanCoder().encode(false)).to.eq(false)
    expect(BooleanCoder().encode(0 as any)).to.eq(false)
    expect(() => BooleanCoder().encode(undefined as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().encode(null as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().encode('' as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().encode(42 as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().encode([] as any)).to.throw('Could not convert')
    expect(() => BooleanCoder().encode({} as any)).to.throw('Could not convert')
  })
})
