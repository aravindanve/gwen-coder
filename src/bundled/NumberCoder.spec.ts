import { expect } from 'chai'
import { NumberStrainer, NumberDecoder, NumberEncoder, NumberCoder } from './NumberCoder'

describe('NumberCoder', () => {
  it('can be initialized', () => {
    NumberStrainer()
    NumberDecoder()
    NumberEncoder()
    NumberCoder()
  })
  it('casts to decode type', () => {
    expect(NumberCoder().asDecodeType(42)).to.eq(42)
    expect(NumberCoder().asDecodeType('' as any)).to.eq(0)
    expect(NumberCoder().asDecodeType('42' as any)).to.eq(42)
    expect(() => NumberCoder().asDecodeType('test' as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asDecodeType(undefined as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asDecodeType(null as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asDecodeType(true as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asDecodeType([] as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asDecodeType({} as any)).to.throw('Could not convert')
  })
  it('casts to encode type', () => {
    expect(NumberCoder().asEncodeType(42)).to.eq(42)
    expect(NumberCoder().asEncodeType('' as any)).to.eq(0)
    expect(NumberCoder().asEncodeType('42' as any)).to.eq(42)
    expect(() => NumberCoder().asEncodeType('test' as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asEncodeType(undefined as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asEncodeType(null as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asEncodeType(true as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asEncodeType([] as any)).to.throw('Could not convert')
    expect(() => NumberCoder().asEncodeType({} as any)).to.throw('Could not convert')
  })
  it('decodes type', () => {
    expect(NumberCoder().decode(42)).to.eq(42)
    expect(NumberCoder().decode('' as any)).to.eq(0)
    expect(NumberCoder().decode('42' as any)).to.eq(42)
    expect(() => NumberCoder().decode('test' as any)).to.throw('Could not convert')
    expect(() => NumberCoder().decode(undefined as any)).to.throw('Could not convert')
    expect(() => NumberCoder().decode(null as any)).to.throw('Could not convert')
    expect(() => NumberCoder().decode(true as any)).to.throw('Could not convert')
    expect(() => NumberCoder().decode([] as any)).to.throw('Could not convert')
    expect(() => NumberCoder().decode({} as any)).to.throw('Could not convert')
  })
  it('encodes type', () => {
    expect(NumberCoder().encode(42)).to.eq(42)
    expect(NumberCoder().encode('' as any)).to.eq(0)
    expect(NumberCoder().encode('42' as any)).to.eq(42)
    expect(() => NumberCoder().encode('test' as any)).to.throw('Could not convert')
    expect(() => NumberCoder().encode(undefined as any)).to.throw('Could not convert')
    expect(() => NumberCoder().encode(null as any)).to.throw('Could not convert')
    expect(() => NumberCoder().encode(true as any)).to.throw('Could not convert')
    expect(() => NumberCoder().encode([] as any)).to.throw('Could not convert')
    expect(() => NumberCoder().encode({} as any)).to.throw('Could not convert')
  })
})
